@model CodeKingdom.Models.ViewModels.EditorViewModel

@{
    ViewBag.Title = Model.Name;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@Styles.Render("~/Content/jPushMenu.css")
@Styles.Render("~/Content/ChatBox.css")

<div>
    <!-- Project Folder/File overview on the left -->   
    <nav class="cbp-spmenu cbp-spmenu-vertical cbp-spmenu-left">
        <div id="new-folder-file">
            @Html.ActionLink("New Folder", "Create", "Folder", new { id = Model.ProjectID }, new { })
            @Html.ActionLink("New File", "Create", "File", new { id = Model.ProjectID }, null)
            <span>@Html.DisplayFor(model => model.Name) </span>
        </div>
        <ul class="menu-list" id="editormenu">

        </ul>

        <!-- Right Click menu -->
        <div id="cntnr">
            <ul class="right-click-items">
                <li class="menu-item" ><a href="#" id="open-in-tab" class="new-tab" target="_blank">Open in new tab</a></li>
                <li class="menu-item" ><a id="context-menu-rename">Rename</a></li>
                <li class="menu-item" ><a id="context-menu-delete">Delete</a></li>
                <li class="menu-item" ><a id="download" href="#">Download</a></li>
            </ul>
        </div>
    </nav>
    
    <!--Editor-->
    <div id="editor">@Html.Raw(Model.Content)</div>
    @using (Html.BeginForm("Save", "File", FormMethod.Post))
    {
        @Html.HiddenFor(model => model.Content, new { @id = "hidden_editor" })
        @Html.HiddenFor(model => model.FileID)
        @Html.AntiForgeryToken()
        <input type="submit" class="btn btn-save" value="Save" />
    }

    <!-- Chat Window -->
    <h2>Chat</h2>
    <div class="chat-container">
        <div class="chat-bar">
            <div><p>Chat for @Model.Name</p></div>
            <input type="button" class="close-chat" value="Close"/>
        </div>
        <div class="chat-content">
            <input type="hidden" id="displayname"/>
            <ul id="discussion">
                @foreach (var chat in Model.Chats)
                {
                    <li class="show-time">
                        <i>@chat.DateTime.ToString("dd MMM HH:mm")</i>
                    </li>
                    <li class="show-name-msg">
                        @{ var username = chat.Username.Split('@');}
                        <strong>  @username[0] </strong>@chat.Message
                    </li>
                }
            </ul>
        </div>
        <div class="chat-input">
            <textarea name="textbox" id="message" placeholder="Your message here..."></textarea>
            <input type="button" id="sendmessage" value="Send" />
        </div>
    </div>
    <img src="/Content/Images/chat-bubble.png" id="chat-bubble"/>
    <div class="active-users">
    </div>
</div>

@section scripts {
    @Scripts.Render("~/Scripts/jquery.signalR-2.2.2.min.js")
    @Scripts.Render("~/signalr/hubs")
    @Scripts.Render("https://cdnjs.cloudflare.com/ajax/libs/ace/1.2.6/ace.js")
    @Scripts.Render("~/Scripts/jPushMenu.js")
    @Scripts.Render("~/Scripts/editor.js")

    <script>
        var fileID = @Model.FileID;
        var projectID = @Model.ProjectID;
        $(document).ready(function() {
            var $navbar = $(".navbar-fixed-top");
            $(window).unbind('scroll');
            $navbar.addClass("top-nav-collapse");
        })
    </script>
    <script>
        function File(id, name, folderID){
            this.ID = id;
            this.Name = name;
            this.FolderID = folderID;
        };

        function Folder(id, name, parentID){
            this.ID = id;
            this.Name = name;
            this.ParentID = parentID;
        };

        var files = [];
        var folders = [];

        @foreach (var file in Model.Files)
        {
            @:files.push(new File(@file.ID, "@file.Name", @file.FolderID));
        }

        @foreach (var folder in Model.Folders)
        {
            @:folders.push(new Folder(@folder.ID, "@folder.Name", @folder.FolderID)); 
        }

        function CreateFolderNode(folders, files, folder){
            var html = '';
            folders.forEach(function(element){
                if (element.ParentID == folder.ID){
                    html += '<li class="folderItem">' + element.Name + '<ul class="folderList">';
                    html += CreateFolderNode(folders, files, element);
                    html += '</ul>';
                }
            });
            html += "</li>";
            files.forEach(function(file){
                if (file.FolderID == folder.ID){
                    html += '<li class="fileItem"><a class="tree-item" data-id="' + file.ID
                        + '" href="/Project/Details/' + projectID + '?fileID=' + file.ID
                        + '">' + file.Name + '</a></li>';
                }
            });
            return html;
        }

        function populateEditorMenu(files, folders){
            var menu = $("#editormenu");
            var tree = CreateFolderNode(folders, files, folders[0]);
            menu.html(tree);
        }

        $(function(){
            populateEditorMenu(files, folders);
        })
    </script>
}    