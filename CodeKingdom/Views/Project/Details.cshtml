@model CodeKingdom.Models.ViewModels.EditorViewModel

@{
    ViewBag.Title = Model.Name;
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<!---Push-menu styles and script-->

<link rel="stylesheet" type="text/css" href="~/Content/jPushMenu.css" />

<!--load jQuery, required-->
<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<!--load jPushMenu, required-->
<script src="~/Scripts/jPushMenu.js"></script>



<!--JS for right-click override-->
<script>
jQuery(document).ready(function($) {
    $('.toggle-menu').jPushMenu();

    /* JS for right click context menu*/

    $(document).on("contextmenu", ".menu-list", function (e) {
        e.preventDefault();
        console.log(e.pageX + "," + e.pageY);
        $("#cntnr").css("left", e.pageX);
        $("#cntnr").css("top", e.pageY);
        // $("#cntnr").hide(100);        
        $("#cntnr").fadeIn(200, startFocusOut());
    });

    $(".tree-item").click(function () {
        var id = $(this).data("id");
    });

});

function startFocusOut() {
    $(document).on("click", function () {
        $("#cntnr").hide();
        $(document).off("click");
    });

};

</script>

<div>
    <nav class="cbp-spmenu cbp-spmenu-vertical cbp-spmenu-left">
        <ul class="menu-list">
            <li><a class="tree-item" data-id="@Model.ProjectID" href="#">@Html.DisplayFor(model => model.Name) </a></li>
            
            <!--TODO: Fix structure - only showing files and then folders -->
            @foreach (var file in Model.Files)
            {
                <li><a class="tree-item @(file.ID == Model.Files.First().ID ? Html.Raw("active") : Html.Raw("") )" data-id ="@file.ID" href="#">@Html.DisplayFor(name => file.Name) </a></li>
            }

            @foreach (var folder in Model.Folders)
            {
                <li><a class="tree-item" data-id ="@folder.ID" href="#">@Html.DisplayFor(name => folder.Name)</a></li>              
            }
        </ul>

        <!--TODO Implement the right click dude -->
        <div id="cntnr">
            <ul class="right-click-items">
                <li class="menu-item"><a href="#">Open in new tab</a></li>
               
                <li class="menu-item">@Html.ActionLink("Edit", "Edit", new { id = Model.ProjectID })</li>
                <li class="menu-item" >@Html.ActionLink("Delete", "Delete", new { id = Model.ProjectID })</li>
                <li class="menu-item" ><a id="download" href="#">Download</a></li>
            </ul>
        </div>
    </nav>
    
    <div id="editor">@Html.Raw(Model.Files.First().Content);</div>

    <!--Editor-->

    <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.2.6/ace.js" type="text/javascript" charset="utf-8"></script>

    <script>
    var editor = ace.edit("editor");
    editor.setTheme("ace/theme/twilight");
    editor.getSession().setMode("ace/mode/javascript");

    editor.getValue();
    </script>

    <h2>Chat</h2>
    <div class="container">
        <input type="text" id="message" />
        <input type="button" id="sendmessage" value="Send" />
        <input type="hidden" id="displayname" />
        <ul id="discussion"></ul>
    </div>
    @section scripts {
        <!--Script references. -->
        <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
        <!--Reference the SignalR library. -->
        <script src="~/Scripts/jquery.signalR-2.2.2.min.js"></script>
        <!--Reference the autogenerated SignalR hub script. -->
        <script src="~/signalr/hubs"></script>
        <!--SignalR script to update the chat page and send messages.-->
        <script>

        $(function () {
            // Reference the auto-generated proxy for the hub.
            
            //file byrjar
            var file = $.connection.fileHub; // adda filehub 

            file.client.ReturnFile = function (content,type) {
                editor.getSession().setMode("ace/mode/"+type);
                editor.setValue(content,-1);

            }


            //chat byrjar
            var chat = $.connection.chatHub;
            // Create a function that the hub can call back to display messages.
            chat.client.addNewMessageToPage = function (name, message) {
                // Add the message to the page.
                $('#discussion').append('<li><strong>' + htmlEncode(name)
                    + '</strong>: ' + htmlEncode(message) + '</li>');
            };
            // Get the user name and store it to prepend to messages.
            $('#displayname').val("@User.Identity.Name");
            // Set initial focus to message input box.
            $('#message').focus();
            // Start the connection.
            $.connection.hub.start().done(function () {
                $('#sendmessage').click(function () {
                    // Call the Send method on the hub.
                    chat.server.send($('#displayname').val(), $('#message').val());
                    // Clear text box and reset focus for next comment.
                    $('#message').val('').focus();
                });
                //getting files by id, when file name is clicked
                $('.tree-item').click(function () {
                    //auto save or not?
                    file.server.get($(this).data("id"));
                });
            });
        });
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
        </script>
    }
    
</div>